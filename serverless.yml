service: todo-api
variablesResolutionMode: 20210326

frameworkVersion: "3"

custom:
  tableName: "todos-table-${sls:stage}"
  esbuild:
    bundle: true
    # minify: true
    watch:
      pattern: ["functions/**/*.ts"] # match only typescript files in src directory
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
  serverless-offline:
    resourceRoutes: true

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 128
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - { "Fn::GetAtt": ["todosTable", "Arn"] }
  environment:
    TODOS_TABLE: ${self:custom.tableName}
resources:
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/cognito-user-pool.yml)}

functions:
  saveTodo:
    handler: ./functions/saveTodo/index.saveTodo
    events:
      - http:
          path: todos
          method: post
          cors: true
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            name: user-pool
            arn: !GetAtt "CognitoUserPool.Arn"

          request:
            template:
              application/json: >
                #set($inputRoot = $input.path('$'))
                  {
                        "title": "$inputRoot.title",
                        "body": "$inputRoot.body",
                        "archived": $inputRoot.archived,
                        "backgroundColor":"$inputRoot.backgroundColor",
                        "userId":"$context.authorizer.claims['cognito:username']"
                  }
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "'application/json'"
            template: >
              #set($inputRoot = $input.path('$'))
                {
                    "error":"$inputRoot.error",
                    "body": "$inputRoot.body",
                    "statusCode":$inputRoot.statusCode
                }
            statusCodes:
              200:
                pattern: ""
              400:
                pattern: '.*"statusCode":400.*'
                template: >
                  #set($inputRoot = $input.path('$'))
                    {
                      "error" : "$inputRoot.error",
                      "body":$inputRoot.body,
                      "statusCode":$inputRoot.statusCode
                    }
              500:
                pattern: '.*"statusCode":500.*'
                template: >
                  #set($inputRoot = $input.path('$'))
                    {
                      "error" : "$inputRoot.error",
                      "body":$inputRoot.body,
                      "statusCode":$inputRoot.statusCode
                    }
                headers:
                  Content-Type: "'application/json'"

  findTodoById:
    handler: ./functions/findTodoById/index.findTodoById
    events:
      - http:
          path: todos/{Title}
          method: get
          cors: true
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            name: user-pool
            arn: !GetAtt "CognitoUserPool.Arn"
          request:
            template:
              application/json: >
                { 
                  "title" : $input.params('title'),
                  "userId": "$context.authorizer.claims['cognito:username']" 
                }
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "'application/json'"
            template: >
              #set($inputRoot = $input.path('$'))
                {
                    "error":"$inputRoot.error",
                    "body": {
                          "title":"$inputRoot.body.title",
                          "body":"$inputRoot.body.body",
                          "archived":$inputRoot.body.archived,
                          "backgroundColor":"$inputRoot.body.backgroundColor",
                          "userId":"$inputRoot.body.userId"
                    },
                    "statusCode":$inputRoot.statusCode
                }
            statusCodes:
              200:
                pattern: ""
              400:
                pattern: '.*"statusCode":400.*'
                template: >
                  #set($inputRoot = $input.path('$'))
                    {
                      "error":"$inputRoot.error",
                      "body":$inputRoot.body,
                      "statusCode":$inputRoot.statusCode
                    }
              500:
                pattern: '.*"statusCode":500.*'
                template: >
                  #set($inputRoot = $input.path('$'))
                    {
                      "error":"$inputRoot.error",
                      "body":$inputRoot.body,
                      "statusCode":$inputRoot.statusCode
                    }
                headers:
                  Content-Type: "'application/json'"

  listTodos:
    handler: ./functions/listTodos/index.listTodos
    events:
      - http:
          path: todos
          method: get
          cors: true
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            name: user-pool
            arn: !GetAtt "CognitoUserPool.Arn"
          request:
            template:
              application/json: >
                { 
                  "archived" : $input.params('archived'),
                  "userId":"$context.authorizer.claims['cognito:username']" 
                }
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "'application/json'"
            template: >
              #set($inputRoot = $input.path('$'))
                {
                    "error":"$inputRoot.error",
                    "body": [
                      #foreach($elem in $inputRoot.body) 
                      {  
                          "title":"$elem.title",
                          "body":"$elem.body",
                          "archived":$elem.archived,
                          "backgroundColor":"$elem.backgroundColor",
                          "userId":"$elem.userId"
                      }
                      #if($foreach.hasNext),#end
                    #end
                    ],
                    "statusCode":$inputRoot.statusCode
                }
            statusCodes:
              200:
                pattern: ""
              400:
                pattern: '.*"statusCode":400.*'
                template: >
                  #set($inputRoot = $input.path('$'))
                    {
                      "error" : "$inputRoot.error",
                      "body":$inputRoot.body,
                      "statusCode":$inputRoot.statusCode
                    }
              500:
                pattern: '.*"statusCode":500.*'
                template: >
                  #set($inputRoot = $input.path('$'))
                    {
                      "error": "$inputRoot.error",
                      "body":$inputRoot.body,
                      "statusCode":$inputRoot.statusCode
                    }
                headers:
                  Content-Type: "'application/json'"

  removeTodoById:
    handler: ./functions/removeTodoById/index.removeTodoById
    events:
      - http:
          path: todos/{Title}
          method: delete
          cors: true
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            name: user-pool
            arn: !GetAtt "CognitoUserPool.Arn"
          request:
            template:
              application/json: >
                { 
                  "title" : $input.params('title'),
                  "userId":"$context.authorizer.claims['cognito:username']" 
                }
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "'application/json'"
            template: >
              #set($inputRoot = $input.path('$'))
                {
                    "error":"$inputRoot.error",
                    "body": "$inputRoot.body",
                    "statusCode":$inputRoot.statusCode
                }
            statusCodes:
              200:
                pattern: ""
              400:
                pattern: '.*"statusCode":400.*'
                template: >
                  #set($inputRoot = $input.path('$'))
                    {
                      "error" : "$inputRoot.error",
                      "body":$inputRoot.body,
                      "statusCode":$inputRoot.statusCode
                    }
              500:
                pattern: '.*"statusCode":500.*'
                template: >
                  #set($inputRoot = $input.path('$'))
                    {
                      "error": "$inputRoot.error",
                      "body":$inputRoot.body,
                      "statusCode":$inputRoot.statusCode
                    }
                headers:
                  Content-Type: "'application/json'"

plugins:
  - serverless-dynamodb-local
  - serverless-esbuild
  - serverless-offline
package:
  individually: true
  exclude:
    - node_modules/**
    - package.json
    - package-lock.json
